
default:

  # test configuration starts
  test_configs:
    stackName: '{{stackName}}'
    bucket: '{{buckets.internal.name}}'
    DISTRIBUTION_ENDPOINT: '{{api_distribution_url}}'
    ems_provider: CUMULUS
    esHost: '{{esHost}}'
    streamName: '{{prefix}}-testStream'
    cnmResponseStream: '{{prefix}}-cnmResponseStream'
    awsAccountId: '{{AWS_ACCOUNT_ID}}'
    awsRegion: us-east-1
    AsyncOperationsTable: '{{prefix}}-AsyncOperationsTable'
    asyncOperationRunnerRole: 'arn:aws:iam::{{AWS_ACCOUNT_ID}}:role/{{prefix}}-lambda-api-gateway'
    sqs_consumer_rate: 300
    IngestAndPublishGranule:
      IngestGranuleOutput:
        granules:
          - files:
            - bucket: '{{buckets.protected.name}}'
              filename: "s3://{{buckets.protected.name}}/MOD09GQ___006/2017/MOD/replace-me-granuleId.hdf"
            - bucket: '{{buckets.private.name}}'
              filename: "s3://{{buckets.private.name}}/MOD09GQ___006/MOD/replace-me-granuleId.hdf.met"
            - bucket: '{{buckets.public.name}}'
              filename: "s3://{{buckets.public.name}}/MOD09GQ___006/MOD/replace-me-granuleId_ndvi.jpg"
            - bucket: '{{buckets.protected-2.name}}'
              filename: "s3://{{buckets.protected-2.name}}/MOD09GQ___006/MOD/replace-me-granuleId.cmr.xml"
      IngestUMMGranuleOutput:
        granules:
          - files:
            - bucket: '{{buckets.protected.name}}'
              filename: "s3://{{buckets.protected.name}}/MOD09GQ___006/2016/MOD/replace-me-granuleId.hdf"
            - bucket: '{{buckets.private.name}}'
              filename: "s3://{{buckets.private.name}}/MOD09GQ___006/MOD/replace-me-granuleId.hdf.met"
            - bucket: '{{buckets.public.name}}'
              filename: "s3://{{buckets.public.name}}/MOD09GQ___006/MOD/replace-me-granuleId_ndvi.jpg"
            - bucket: '{{buckets.protected-2.name}}'
              filename: "s3://{{buckets.protected-2.name}}/MOD09GQ___006/MOD/replace-me-granuleId.cmr.json"
      SyncGranuleOutput:
        granules:
          - files:
            - bucket: '{{buckets.internal.name}}'
              filename: 's3://{{buckets.internal.name}}/file-staging/{{stackName}}/replace-me-collectionId/replace-me-granuleId.hdf'
              fileStagingDir: 'file-staging/{{stackName}}/replace-me-collectionId'
            - bucket: '{{buckets.internal.name}}'
              filename: 's3://{{buckets.internal.name}}/file-staging/{{stackName}}/replace-me-collectionId/replace-me-granuleId.hdf.met'
              fileStagingDir: 'file-staging/{{stackName}}/replace-me-collectionId'
            - bucket: '{{buckets.internal.name}}'
              filename: 's3://{{buckets.internal.name}}/file-staging/{{stackName}}/replace-me-collectionId/replace-me-granuleId_ndvi.jpg'
              fileStagingDir: 'file-staging/{{stackName}}/replace-me-collectionId'
    SyncGranule:
      granules:
        - files:
          - bucket: '{{buckets.internal.name}}'
            filename: 's3://{{buckets.internal.name}}/custom-staging-dir/{{stackName}}/replace-me-collectionId/replace-me-granuleId.hdf'
            fileStagingDir: 'custom-staging-dir/{{stackName}}/replace-me-collectionId'
          - bucket: '{{buckets.internal.name}}'
            filename: 's3://{{buckets.internal.name}}/custom-staging-dir/{{stackName}}/replace-me-collectionId/replace-me-granuleId.hdf.met'
            fileStagingDir: 'custom-staging-dir/{{stackName}}/replace-me-collectionId'
  # test configuration ends

  prefix: 'change-me'
  stackName: 'change-me'
  # stackNameNoDash: TestCumulusIntegration
  shared_data_bucket: cumulus-data-shared
  api_distribution_url: https://example.com/
  api_lambda_memory: 756
  params:
    - name: CmrPassword
      value: '{{CMR_PASSWORD}}'
    - name: DockerEmail
      value: '{{DOCKER_EMAIL}}'
    - name: DockerPassword
      value: '{{DOCKER_PASS}}'

  apiStage: dev

  vpc:
    vpcId: '{{VPC_ID}}'
    subnets:
      - '{{AWS_SUBNET}}'

  ecs:
    instanceType: t2.medium
    desiredInstances: 1
    availabilityZone: us-east-1b
    amiid: ami-a7a242da
    publicIp: true
    restartTasksOnDeploy: true
    docker:
      username: cumulususer
    services:
      EcsTaskHelloWorld:
        image: cumuluss/cumulus-ecs-task:1.2.3
        cpu: 400
        memory: 700
        count: 1
        envs:
          AWS_DEFAULT_REGION:
            function: Fn::Sub
            value: '${AWS::Region}'
        commands:
          - cumulus-ecs-task
          - '--activityArn'
          - function: Ref
            value: EcsTaskHelloWorldActivity
          - '--lambdaArn'
          - function: Ref
            value: HelloWorldLambdaFunction

  activities:
    - name: EcsTaskHelloWorld

  system_bucket: '{{buckets.internal.name}}'

  buckets:
    internal:
      name: cumulus-test-sandbox-internal
      type: internal
    private:
      name: cumulus-test-sandbox-private
      type: private
    protected:
      name: cumulus-test-sandbox-protected
      type: protected
    public:
      name: cumulus-test-sandbox-public
      type: public
    protected-2:
      name: cumulus-test-sandbox-protected-2
      type: protected
    shared:
      name: cumulus-data-shared
      type: shared

  cmr:
    username: '{{CMR_USERNAME}}'
    provider: CUMULUS
    clientId: 'cumulus-core-{{stackName}}'
    password: '{{CMR_PASSWORD}}'

  stepFunctions: !!files [
    'workflows/helloworld.yml',
    'workflows/cnm.yml',
    'workflows/errorsAndRetries.yml',
    'workflows/sips.yml',
    'workflows/ingestGranule.yml',
    'workflows/syncGranule.yml'
  ]

  iams:
    ecsRoleArn: 'arn:aws:iam::{{AWS_ACCOUNT_ID}}:role/{{prefix}}-ecs'
    lambdaApiGatewayRoleArn: 'arn:aws:iam::{{AWS_ACCOUNT_ID}}:role/{{prefix}}-lambda-api-gateway'
    lambdaProcessingRoleArn: 'arn:aws:iam::{{AWS_ACCOUNT_ID}}:role/{{prefix}}-lambda-processing'
    stepRoleArn: 'arn:aws:iam::{{AWS_ACCOUNT_ID}}:role/{{prefix}}-steprole'
    instanceProfile: 'arn:aws:iam::{{AWS_ACCOUNT_ID}}:instance-profile/{{prefix}}-ecs'
    distributionRoleArn: 'arn:aws:iam::{{AWS_ACCOUNT_ID}}:role/{{prefix}}-distribution-api-lambda'
    scalingRoleArn: 'arn:aws:iam::{{AWS_ACCOUNT_ID}}:role/{{prefix}}-scaling-role'
    migrationRoleArn: 'arn:aws:iam::{{AWS_ACCOUNT_ID}}:role/{{prefix}}-migration-processing'

  sns:
    sftracker:
      subscriptions:
        2ndlambda:
          endpoint:
            function: Fn::GetAtt
            array:
              - SnsS3TestLambdaFunction
              - Arn
          protocol: lambda


  urs_url: https://uat.urs.earthdata.nasa.gov/ #make sure to include the trailing slash

    # if not specified the value of the apigateway backend endpoint is used
    # api_backend_url: https://apigateway-url-to-api-backend/ #make sure to include the trailing slash

    # if not specified the value of the apigateway dist url is used
    # api_distribution_url: https://apigateway-url-to-distribution-app/ #make sure to include the trailing slash

  # URS users who should have access to the dashboard application.
  users:
    - username: testuser


# ------------------------
# CUMULUS team deployments
# ------------------------
cumulus-from-npm:
  prefix: test-npm-integration
  stackName: test-npm-integration # used by the integration repo
  stackNameNoDash: TestNpmIntegration

cumulus-from-source:
  prefix: test-src-integration
  stackName: test-src-integration # used by the cumulus repo
  stackNameNoDash: TestSourceIntegration

cumulus-from-pr:
  prefix: test-pr-integration
  stackName: test-pr-integration # used by the PR
  stackNameNoDash: TestPrIntegration

cumulus-nightly:
  prefix: nightly
  stackName: nightly # used by the nightly cron job
  stackNameNoDash: Nightly

cumulus-sit:
  prefix: cumulus-sit
  stackName: cumulus-sit
  stackNameNoDash: cumulusSit

  buckets:
    internal:
      name: cumulus-sit-internal
      type: internal
    private:
      name: cumulus-sit-private
      type: private
    protected:
      name: cumulus-sit-protected
      type: protected
    public:
      name: cumulus-sit-public
      type: public
    protected-2:
      name: cumulus-sit-protected
      type: protected

# -------------------------------
# CUMULUS individual deployments.
# -------------------------------
aimee-test:
  prefix: aimee-test
  stackName: aimee-test
  stackNameNoDash: aimeeTest

lf:
  prefix: lf-cumulus
  stackName: lf-cumulus
  stackNameNoDash: lfCumulus

  buckets:
    internal:
      name: lf-internal
      type: internal
    private:
      name: lf-private
      type: private
    protected:
      name: lf-protected
      type: protected
    public:
      name: lf-cumulus-public
      type: public
    protected-2:
      name: lf-protected-2
      type: protected

lf-int-test:
  prefix: lf-int-test
  stackName: lf-int-test
  stackNameNoDash: lfIntTest

  buckets:
    internal:
      name: lf-internal
      type: internal
    private:
      name: lf-private
      type: private
    protected:
      name: lf-protected
      type: protected
    public:
      name: lf-cumulus-public
      type: public
    protected-2:
      name: lf-protected-2
      type: protected

lf-sit:
  prefix: lf-sit
  stackName: lf-sit
  stackNameNoDash: lfSit

  buckets:
    internal:
      name: lf-sit-internal
      type: internal
    private:
      name: lf-sit-private
      type: private
    protected:
      name: lf-sit-protected
      type: protected
    public:
      name: lf-sit-public
      type: public
    protected-2:
      name: lf-sit-protected
      type: protected

kk-uat-deployment:
  prefix: kk-test-uat
  stackName: kk-test-uat
  stackNameNoDash: KkTestUat
  esHost: https://search-kk-test-uat-es5-bk24w6blilunzp4fc4ma3xwtqu.us-east-1.es.amazonaws.com
  system_bucket: '{{stackName}}-internal'
  buckets:
    internal:
      name: '{{stackName}}-internal'
      type: internal
    private:
      name: '{{stackName}}-private'
      type: private
    protected:
      name: '{{stackName}}-protected'
      type: protected
    public:
      name: '{{stackName}}-public'
      type: public

mth:
  prefix: mth
  stackName: mth
  stackNameNoDash: Mth
  useWorkflowLambdaVersions: false
  buckets:
    internal:
      name: '{{stackName}}-internal'
      type: internal
    private:
      name: '{{stackName}}-private'
      type: private
    protected:
      name: '{{stackName}}-protected'
      type: protected
    protected-2:
      name: '{{stackName}}-protected'
      type: protected
    public:
      name: '{{stackName}}-public'
      type: public

jl:
  prefix: jl-test-integration
  stackName: jl-test-integration
  stackNameNoDash: JlTestIntegration
  buckets:
    private:
      name: jl-test-integration-private
      type: private
    protected:
      name: jl-test-integration-protected
      type: protected
    public:
      name: jl-test-integration-public
      type: public
    protected-2:
      name: jl-test-integration-protected-2
      type: protected
    shared-2:
      name: rvl-internal
      type: shared

mhs2:
  prefix: mhs2
  stackName: mhs2
  stackNameNoDash: mhs2
  buckets:
    internal:
      name: mhs-internal
      type: internal
    private:
      name: mhs-private
      type: private
    protected:
      name: mhs-protected
      type: protected
    public:
      name: mhs-public
      type: public
    protected-2:
      name: mhs-protected-2
      type: protected
    shared:
      name: cumulus-data-shared
      type: shared
  api_distribution_url: '{{API_DISTRIBUTION_URL}}'
  system_bucket: '{{buckets.internal.name}}'

  users:
    - username: '{{EARTHDATA_LOGIN_USERNAME}}'

  AutoScalingPolicyConfiguration:
  GranulesTable:
    enableAutoScaling: false
  FilesTable:
    enableAutoScaling: false

gitc:
  prefix: {{stackName}}
  stackName: {{stackName}}
  stackNameNoDash: {{stackNameNoDash}}

  iams:
    ecsRoleArn: 'arn:aws:iam::{{AWS_ACCOUNT_ID}}:role/{{PREFIX}}-ecs'
    lambdaApiGatewayRoleArn: 'arn:aws:iam::{{AWS_ACCOUNT_ID}}:role/{{PREFIX}}-lambda-api-gateway'
    lambdaProcessingRoleArn: 'arn:aws:iam::{{AWS_ACCOUNT_ID}}:role/{{PREFIX}}-lambda-processing'
    stepRoleArn: 'arn:aws:iam::{{AWS_ACCOUNT_ID}}:role/{{PREFIX}}-steprole'
    instanceProfile: 'arn:aws:iam::{{AWS_ACCOUNT_ID}}:instance-profile/{{PREFIX}}-ecs'
    distributionRoleArn: 'arn:aws:iam::{{AWS_ACCOUNT_ID}}:role/{{PREFIX}}-distribution-api-lambda'

  buckets:
    internal:
      name: '{{PREFIX}}-internal'
      type: internal
    private:
      name: '{{PREFIX}}-private'
      type: private
    protected:
      name: '{{PREFIX}}-protected'
      type: protected
    public:
      name: '{{PREFIX}}-public'
      type: public
    protected-2:
      name: '{{PREFIX}}-protected-2'
      type: protected
    shared:
      name: '{{PREFIX}}-data-shared'
      type: shared
  api_distribution_url: '{{API_DISTRIBUTION_URL}}'
  system_bucket: '{{buckets.internal.name}}'

  users:
    - username: '{{EARTHDATA_LOGIN_USERNAME}}'

  AutoScalingPolicyConfiguration:
  GranulesTable:
    enableAutoScaling: false
  FilesTable:
    enableAutoScaling: false

mvd:
  prefix: mvd
  stackName: mvd
  stackNameNoDash: mvd
  buckets:
    internal:
      name: '{{stackName}}-internal'
      type: internal
  bucket: '{{stackName}}-internal'

mvd-dev:
  prefix: mvd-dev
  stackName: mvd-dev
  stackNameNoDash: mvdDev
  buckets:
    internal:
      name: 'mvd-internal'
      type: internal
  bucket: 'mvd-internal'

jc:
  prefix: jc
  stackName: jc
  stackNameNoDash: jc
  ecs:
    services:
      EcsTaskHelloWorld:
        image: 596205514787.dkr.ecr.us-east-1.amazonaws.com/cumulus-dev-testing:latest
        cpu: 400
        memory: 700
        count: 1
        envs:
          AWS_DEFAULT_REGION:
            function: Fn::Sub
            value: '${AWS::Region}'
        commands:
          - cumulus-ecs-task
          - '--activityArn'
          - function: Ref
            value: EcsTaskHelloWorldActivity
          - '--lambdaArn'
          - function: Ref
            value: HelloWorldLambdaFunction
    docker:
      username: cumulususer
      registry: ecr

mhs:
  prefix: mhs
  stackName: mhs
  stackNameNoDash: mhs

mhs3:
  prefix: mhs3
  stackName: mhs3
  stackNameNoDash: mhs3
  buckets:
    internal:
      name: mhs3-internal
      type: internal
    private:
      name: mhs3-private
      type: private
    protected:
      name: mhs3-protected
      type: protected
    public:
      name: mhs3-public
      type: public
    protected-2:
      name: mhs3-protected-2
      type: protected
    shared:
      name: cumulus-data-shared
      type: shared
  system_bucket: mhs3-internal

jk:
  prefix: jk
  stackName: jk
  stackNameNoDash: jk

jk2:
  prefix: jk2
  stackName: jk2
  stackNameNoDash: jk2

mboyd-test:
  prefix: mboyd-test
  stackName: '{{prefix}}'
  stackNameNoDash: mboydTest

mboyd-int:
  prefix: mboyd-int
  stackName: '{{prefix}}'
  stackNameNoDash: mboydInt

pq:
  prefix: pq
  stackName: pq
  stackNameNoDash: pq
