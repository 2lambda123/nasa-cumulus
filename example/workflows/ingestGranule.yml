IngestGranuleCatchDuplicateErrorTest:
  Comment: 'Ingest Granule Catch Duplicate Error'
  StartAt: Report
  States:
    Report:
      Parameters:
        cma:
          event.$: '$'
          workflow_config:
            Report:
              cumulus_message:
                input: '{$}'
      Type: Task
      Resource: ${SfSnsReportLambdaFunction.Arn}
      Retry:
        - &LambdaServiceExceptionRetry
          ErrorEquals:
          - Lambda.ServiceException
          - Lambda.AWSLambdaException
          - Lambda.SdkClientException
          IntervalSeconds: 2
          MaxAttempts: 6
          BackoffRate: 2
      Next: SyncGranule
    SyncGranule:
      Parameters:
        cma:
          event.$: '$'
          workflow_config:
            SyncGranule:
              buckets: '{$.meta.buckets}'
              provider: '{$.meta.provider}'
              collection: '{$.meta.collection}'
              stack: '{$.meta.stack}'
              downloadBucket: '{$.cumulus_meta.system_bucket}'
              duplicateHandling: '{$.meta.collection.duplicateHandling}'
              pdr: '{$.meta.pdr}'
              cumulus_message:
                outputs:
                  - source: '{$.granules}'
                    destination: '{$.meta.input_granules}'
                  - source: '{$}'
                    destination: '{$.payload}'
                  - source: '{$.process}'
                    destination: '{$.cumulus_meta.process}'
      Type: Task
      Resource: ${SyncGranuleLambdaFunction.Arn}
      Retry:
          - ErrorEquals:
              - States.ALL
            IntervalSeconds: 2
            MaxAttempts: 3
      Catch:
        - ErrorEquals:
          - 'DuplicateFile'
          ResultPath: '$.meta.syncGranCaughtError'
          Next: WorkflowSucceeded
        - ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: StopStatus
      Next: ChooseProcess
    ChooseProcess:
      Type: Choice
      Choices:
        - Variable: $.meta.process
          StringEquals: modis
          Next: ProcessingStep
      Default: StopStatus
    ProcessingStep:
      Parameters:
        cma:
          event.$: '$'
          workflow_config:
            ProcessingStep:
              bucket: '{$.meta.buckets.internal.name}'
              collection: '{$.meta.collection}'
              cumulus_message:
                outputs:
                  - source: '{$.files}'
                    destination: '{$.payload}'
      Type: Task
      Resource: ${FakeProcessingLambdaFunction.Arn}
      Catch:
        - ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: StopStatus
      Retry:
        - ErrorEquals:
            - States.ALL
          IntervalSeconds: 2
          MaxAttempts: 3
      Next: FilesToGranulesStep
    FilesToGranulesStep:
      Parameters:
        cma:
          event.$: '$'
          workflow_config:
            FilesToGranulesStep:
              inputGranules: '{$.meta.input_granules}'
              granuleIdExtraction: '{$.meta.collection.granuleIdExtraction}'
      Type: Task
      Resource: ${FilesToGranulesLambdaFunction.Arn}
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: StopStatus
      Next: MoveGranuleStep
    MoveGranuleStep:
      Parameters:
        cma:
          event.$: '$'
          workflow_config:
            MoveGranuleStep:
              bucket: '{$.meta.buckets.internal.name}'
              buckets: '{$.meta.buckets}'
              distribution_endpoint: '{$.meta.distribution_endpoint}'
              collection: '{$.meta.collection}'
              duplicateHandling: '{$.meta.collection.duplicateHandling}'
      Type: Task
      Resource: ${MoveGranulesLambdaFunction.Arn}
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
          - 'DuplicateFile'
          ResultPath: '$.meta.moveGranCaughtError'
          Next: WorkflowSucceeded
        - ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: StopStatus
      Next: StopStatus
    StopStatus:
      Parameters:
        cma:
          event.$: '$'
          workflow_config:
            StopStatus:
              sfnEnd: true
              stack: '{$.meta.stack}'
              bucket: '{$.meta.buckets.internal.name}'
              stateMachine: '{$.cumulus_meta.state_machine}'
              executionName: '{$.cumulus_meta.execution_name}'
              cumulus_message:
                input: '{$}'
      Type: Task
      Resource: ${SfSnsReportLambdaFunction.Arn}
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
          - States.ALL
          Next: WorkflowFailed
      End: true
    WorkflowFailed:
      Type: Fail
      Cause: 'Workflow failed'
    WorkflowSucceeded:
      Type: Succeed
