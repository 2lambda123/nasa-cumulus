HelloWorldWorkflow:
  Comment: 'Returns Hello World'
  StartAt: StartStatus
  States:
    StartStatus:
      Parameters:
        cma:
          event.$: '$'
          task_config:
            cumulus_message:
              input: '{$}'
      Type: Task
      Resource: ${SfSnsReportLambdaFunction.Arn}
      Retry:
        - &LambdaServiceExceptionRetry
          ErrorEquals:
          - Lambda.ServiceException
          - Lambda.AWSLambdaException
          - Lambda.SdkClientException
          IntervalSeconds: 2
          MaxAttempts: 6
          BackoffRate: 2
      Next: HelloWorld
    HelloWorld:
      Parameters:
        cma:
          event.$: '$'
          task_config:
            buckets: '{$.meta.buckets}'
            provider: '{$.meta.provider}'
            collection: '{$.meta.collection}'
      Type: Task
      Resource: ${HelloWorldLambdaFunction.Arn}
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Next: StopStatus
    StopStatus:
      Parameters:
        cma:
          event.$: '$'
          task_config:
            sfnEnd: true
            stack: '{$.meta.stack}'
            bucket: '{$.meta.buckets.internal.name}'
            stateMachine: '{$.cumulus_meta.state_machine}'
            executionName: '{$.cumulus_meta.execution_name}'
            cumulus_message:
              input: '{$}'
      Type: Task
      Resource: ${SfSnsReportLambdaFunction.Arn}
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
          - States.ALL
          Next: WorkflowFailed
      End: true
    WorkflowFailed:
      Type: Fail
      Cause: 'Workflow failed'

EcsHelloWorldWorkflow:
  Comment: 'Returns Hello World'
  StartAt: StartStatus
  States:
    StartStatus:
      Parameters:
        cma:
          event.$: '$'
          task_config:
            StartStatus:
              cumulus_message:
                input: '{$}'
      Type: Task
      Resource: ${SfSnsReportLambdaFunction.Arn}
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Next: EcsTaskHelloWorld
    EcsTaskHelloWorld:
      Parameters:
        cma:
          event.$: '$'
          task_config:
            buckets: '{$.meta.buckets}'
            provider: '{$.meta.provider}'
            collection: '{$.meta.collection}'
      Type: Task
      Resource: ${EcsTaskHelloWorldActivity}
      TimeoutSeconds: 60
      Retry:
        - ErrorEquals:
            - States.Timeout
          MaxAttempts: 1
      Next: StopStatus
    StopStatus:
      Parameters:
        cma:
          event.$: '$'
          task_config:
            sfnEnd: true
            stack: '{$.meta.stack}'
            bucket: '{$.meta.buckets.internal.name}'
            stateMachine: '{$.cumulus_meta.state_machine}'
            executionName: '{$.cumulus_meta.execution_name}'
            cumulus_message:
              input: '{$}'
      Type: Task
      Resource: ${SfSnsReportLambdaFunction.Arn}
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
          - States.ALL
          Next: WorkflowFailed
      End: true
    WorkflowFailed:
      Type: Fail
      Cause: 'Workflow failed'


EcsKesCMAHelloWorldWorkflow:
  Comment: 'Returns Hello World'
  StartAt: StartStatus
  States:
    StartStatus:
      Parameters:
        cma:
          event.$: '$'
          task_config:
            cumulus_message:
              input: '{$}'
      Type: Task
      Resource: ${SfSnsReportLambdaFunction.Arn}
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Next: EcsTaskHelloWorld
    EcsTaskHelloWorld:
      Parameters:
        cumulus_meta: $.cumulus_meta
        meta: $.meta
        payload: $.payload
        exception: $.exception
        task_config:
          buckets: '{$.meta.buckets}'
          provider: '{$.meta.provider}'
          collection: '{$.meta.collection}'
      Type: Task
      Resource: ${EcsTaskHelloWorldKesCmaActivity}
      TimeoutSeconds: 60
      Retry:
        - ErrorEquals:
            - States.Timeout
          MaxAttempts: 1
      Next: StopStatus
    StopStatus:
      Parameters:
        cma:
          event.$: '$'
          task_config:
            sfnEnd: true
            stack: '{$.meta.stack}'
            bucket: '{$.meta.buckets.internal.name}'
            stateMachine: '{$.cumulus_meta.state_machine}'
            executionName: '{$.cumulus_meta.execution_name}'
            cumulus_message:
              input: '{$}'
      Type: Task
      Resource: ${SfSnsReportLambdaFunction.Arn}
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
          - States.ALL
          Next: WorkflowFailed
      End: true
    WorkflowFailed:
      Type: Fail
      Cause: 'Workflow failed'
